import { useState, useEffect, useRef } from "react";
import { Stars, Share, Download, RotateCcw, Copy } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import InterpretationTabs from "./interpretation-tabs";
import { getTarotCard } from "@/lib/tarot-data";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import { useIsMobile } from "@/hooks/use-mobile";
import { useMatrixPositioning } from "@/hooks/use-matrix-positioning";

interface MatrixVisualizationProps {
  result: any;
  onNewAnalysis: () => void;
}

export default function MatrixVisualizat          {/* 상세 해석 탭 컴포넌트 추가 */}
          {(
            <InterpretationTabs 
              matrixPoints={matrixPoints} 
              mode={mode} 
            />
          )}nNewAnalysis }: MatrixVisualizationProps) {
  const [showLoading, setShowLoading] = useState(true);
  const [showMatrix, setShowMatrix] = useState(false);
  const [showInterpretations, setShowInterpretations] = useState(false);
  const [selectedPoint, setSelectedPoint] = useState<number | null>(null);
  const [containerSize, setContainerSize] = useState(500); // 컨테이너 기본 크기
  const containerRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  const { deviceConfig, calculateOptimizedPositions } = useMatrixPositioning();
  const { toast } = useToast();

  useEffect(() => {
    // 결과가 있는 경우 애니메이션을 건너뛰고 바로 표시
    if (result) {
      setShowLoading(false);
      setShowMatrix(true);
      setShowInterpretations(true);
      return;
    }

    // 애니메이션 효과 (이제는 필요 없지만 혹시 몰라 유지)
    const timer1 = setTimeout(() => {
      setShowLoading(false);
      setShowMatrix(true);
    }, 2000); // 로딩 시간 단축

    const timer2 = setTimeout(() => {
      setShowInterpretations(true);
    }, 2500); // 상세 해석도 더 빨리 표시

    // 최적의 컨테이너 크기 계산 및 리사이즈 이벤트 처리
    const updateContainerSize = () => {
      if (containerRef.current) {
        // 화면 크기 및 비율 계산
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;
        const aspectRatio = screenWidth / screenHeight;
        const containerWidth = containerRef.current.parentElement?.clientWidth || screenWidth;
        
        // 컨테이너 최대 너비 (부모 컨테이너의 95%)
        const maxWidth = Math.min(containerWidth * 0.95, screenWidth * 0.95);
        
        // 사용 가능한 최대 높이 (화면 높이의 일정 비율)
        // 모바일에서는 네비게이션 바 등을 고려하여 더 작은 비율 사용
        const maxHeightRatio = isMobile ? 0.6 : 0.7;
        const maxHeight = screenHeight * maxHeightRatio;
        
        // 화면 크기에 따른 최적화된 크기 계산
        let computedSize;
        
        if (isMobile) {
          if (screenWidth < 360) {
            // 매우 작은 화면 (iPhone SE 등)
            computedSize = Math.min(maxWidth * 0.98, maxHeight);
          } else if (screenWidth < 480) {
            // 작은 모바일 화면
            computedSize = Math.min(maxWidth * 0.96, maxHeight);
          } else {
            // 큰 모바일 화면 (태블릿 등)
            computedSize = Math.min(maxWidth * 0.94, maxHeight);
          }
        } else {
          // 데스크톱 환경에서
          if (aspectRatio > 1.5) {
            // 가로로 매우 긴 화면 (와이드 모니터)
            computedSize = Math.min(maxWidth * 0.85, maxHeight);
          } else if (aspectRatio > 1) {
            // 일반적인 가로 화면
            computedSize = Math.min(maxWidth * 0.8, maxHeight);
          } else {
            // 세로로 긴 화면 (태블릿 세로 모드 등)
            computedSize = Math.min(maxWidth * 0.95, maxHeight);
          }
        }
        
        // 최소 크기 보장 (UI 요소가 너무 작아지지 않도록)
        computedSize = Math.max(computedSize, 280);
        
        // Safari에서 소수점으로 인한 렌더링 문제 방지를 위해 정수로 반올림
        setContainerSize(Math.floor(computedSize));
      }
    };

    // 초기 크기 설정
    updateContainerSize();

    // 리사이즈 이벤트 리스너
    window.addEventListener('resize', updateContainerSize);

    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
      window.removeEventListener('resize', updateContainerSize);
    };
  }, [isMobile]);

  // 최적화된 매트릭스 포인트 위치 계산
  const optimizedPositions = calculateOptimizedPositions(result.matrixPoints, containerSize);

  // 결과가 로드되면 해석 탭을 표시하기 위한 useEffect
  useEffect(() => {
    if (result) {
      // 로딩 애니메이션 없이 바로 보이도록 설정
      setShowLoading(false);
      setShowMatrix(true);
      setShowInterpretations(true);
      console.log("Result loaded, showing interpretations:", result);
    }
  }, [result]);

  const handlePointClick = (pointNumber: number) => {
    setSelectedPoint(pointNumber);
    const card = getTarotCard(pointNumber);
    toast({
      title: `${pointNumber}번 - ${card.name}`,
      description: card.shortDescription,
    });
  };

  const handleShare = async () => {
    try {
      // 공유할 URL 생성
      const shareUrl = window.location.href;
      
      // Web Share API 지원 확인 (모바일)
      if (navigator.share) {
        await navigator.share({
          title: title,
          text: '나의 운명 매트릭스를 확인해보세요!',
          url: shareUrl
        });
        
        toast({
          title: "공유 성공",
          description: "분석 결과가 공유되었습니다.",
        });
      } else {
        // 클립보드에 URL 복사 (PC)
        await navigator.clipboard.writeText(shareUrl);
        
        toast({
          title: "공유 링크 복사됨",
          description: "분석 결과 링크가 클립보드에 복사되었습니다.",
        });
      }
    } catch (error) {
      console.error("공유 오류:", error);
      toast({
        title: "공유 실패",
        description: "링크 공유 중 오류가 발생했습니다.",
        variant: "destructive",
      });
    }
  };

  // Instagram 공유 기능 제거됨

  const handleDownload = async () => {
    try {
      toast({
        title: "PDF 생성 중",
        description: "분석 결과 PDF를 준비하고 있습니다.",
      });
      
      // 결과 이미지 생성을 위한 컨테이너 선택
      const element = document.querySelector('.matrix-visualization-container') as HTMLElement;
      if (!element) throw new Error("분석 결과 컨테이너를 찾을 수 없습니다.");
      
      // html2canvas 라이브러리를 사용하여 고품질 이미지 생성
      const canvas = await html2canvas(element, {
        scale: 2, // 고해상도
        backgroundColor: '#0f172a', // 배경색 지정
        logging: false,
        useCORS: true, // 외부 이미지 로드 허용
        allowTaint: true, // 교차 출처 이미지 허용
      });
      
      const imgData = canvas.toDataURL('image/jpeg', 0.85);
      
      // PDF 생성
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / (imgHeight + 30));
      const imgX = (pdfWidth - imgWidth * ratio) / 2;
      const imgY = 10;
      
      // 헤더 추가
      pdf.setFillColor(15, 23, 42); // 어두운 배경색
      pdf.rect(0, 0, pdfWidth, pdfHeight, 'F');
      
      // 제목 추가
      pdf.setTextColor(255, 255, 255);
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(16);
      
      const title = mode === 'couple' 
        ? `${result.person1.name}과 ${result.person2.name}의 데스티니 매트릭스`
        : `${result.name}의 데스티니 매트릭스`;
        
      pdf.text(title, pdfWidth/2, 20, { align: 'center' });
      
      // 이미지 추가
      pdf.addImage(imgData, 'JPEG', imgX, imgY + 15, imgWidth * ratio, imgHeight * ratio);
      
      // 푸터 추가
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(150, 150, 150);
      pdf.text('© 데스티니 매트릭스 - destiny33.netlify.app', pdfWidth/2, pdfHeight - 10, { align: 'center' });
      
      // PDF 저장
      pdf.save('운명의_매트릭스_분석결과.pdf');
      
      toast({
        title: "PDF 생성 완료",
        description: "분석 결과가 PDF로 저장되었습니다.",
      });
    } catch (error) {
      console.error("PDF 생성 오류:", error);
      toast({
        title: "PDF 생성 실패",
        description: "PDF 생성 중 오류가 발생했습니다. 다시 시도해주세요.",
        variant: "destructive",
      });
    }
  };

  if (showLoading) {
    return (
      <div className="glass-card p-8 sm:p-16 text-center">
        <div className="w-20 h-20 sm:w-24 sm:h-24 mx-auto mb-4 sm:mb-6 relative">
          <div className="absolute inset-0 border-4 border-white/30 rounded-full"></div>
          <div className="absolute inset-0 border-4 border-yellow-400 rounded-full border-t-transparent animate-spin"></div>
          <div className="absolute inset-2 border-4 border-purple-400 rounded-full border-b-transparent animate-spin" style={{ animationDirection: 'reverse', animationDuration: '2s' }}></div>
        </div>
        <h3 className="text-xl sm:text-2xl font-bold text-white mb-2">운명의 매트릭스를 계산하고 있습니다...</h3>
        <p className="text-sm sm:text-base text-white/70">잠시만 기다려주세요. 우주의 에너지를 읽어내는 중입니다.</p>
      </div>
    );
  }

  const matrixPoints = result.mode === 'couple' ? result.matrixPoints.person1 : result.matrixPoints;
  const title = result.mode === 'couple' 
    ? `${result.person1.name}과 ${result.person2.name}의 데스티니 매트릭스`
    : `${result.name}의 데스티니 매트릭스`;
  const mode = result.mode || 'personal';

  return (
    <div className="w-full text-white">
      {showLoading && (
        <div className="glass-card p-8 sm:p-16 text-center">
          <div className="w-20 h-20 sm:w-24 sm:h-24 mx-auto mb-4 sm:mb-6 relative">
            <div className="absolute inset-0 border-4 border-white/30 rounded-full"></div>
            <div className="absolute inset-0 border-4 border-yellow-400 rounded-full border-t-transparent animate-spin"></div>
            <div className="absolute inset-2 border-4 border-purple-400 rounded-full border-b-transparent animate-spin" style={{ animationDirection: 'reverse', animationDuration: '2s' }}></div>
          </div>
          <h3 className="text-xl sm:text-2xl font-bold text-white mb-2">운명의 매트릭스를 계산하고 있습니다...</h3>
          <p className="text-sm sm:text-base text-white/70">잠시만 기다려주세요. 우주의 에너지를 읽어내는 중입니다.</p>
        </div>
      )}

      {showMatrix && (
        <>
          <div className="glass-card p-4 sm:p-6 md:p-8 mb-8">
            <div className="flex justify-between items-center mb-4 sm:mb-6">
              <h2 className="text-xl sm:text-2xl md:text-3xl font-bold">
                {result.mode === 'couple' 
                  ? `${result.person1.name}과 ${result.person2.name}의 운명 매트릭스`
                  : `${result.name}의 운명 매트릭스`}
              </h2>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="icon" 
                  onClick={handleShare}
                  className="rounded-full bg-white/10 border-white/20 hover:bg-white/20"
                >
                  <Share className="h-4 w-4 text-white" />
                </Button>
                <Button 
                  variant="outline" 
                  size="icon" 
                  onClick={handleDownload}
                  className="rounded-full bg-white/10 border-white/20 hover:bg-white/20"
                >
                  <Download className="h-4 w-4 text-white" />
                </Button>
              </div>
            </div>
            
            <div id="matrix-diagram-container" className="relative w-full flex justify-center my-4">
              <div 
                ref={containerRef}
                className="matrix-diagram relative bg-black/40 rounded-lg border border-white/10 backdrop-blur-md matrix-visualization-container"
                style={{ 
                  width: `${containerSize}px`, 
                  height: `${containerSize}px`,
                  maxWidth: '100%',
                  margin: '0 auto',
                  overflow: 'visible',
                  aspectRatio: '1/1', // 정사각형 비율 강제
                  boxSizing: 'border-box',
                  position: 'relative',
                  boxShadow: '0 0 30px rgba(0, 0, 0, 0.3)'
                }}
              >
                {/* 매트릭스 배경 효과 */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-900/20 to-purple-900/20 z-0 rounded-lg"></div>
                <div className="absolute inset-0 bg-[url('/matrix-bg.svg')] bg-no-repeat bg-center bg-contain opacity-10 z-1 rounded-lg"></div>
                
                {/* 연결선 SVG */}
                <svg 
                  className="absolute inset-0 z-10 pointer-events-none" 
                  style={{ overflow: 'visible' }}
                  viewBox={`0 0 ${containerSize} ${containerSize}`}
                  preserveAspectRatio="xMidYMid meet"
                  width="100%"
                  height="100%"
                >
                  {/* 중앙에서 주요 포인트로의 연결선 */}
                  {['spiritualPurpose', 'talent', 'karma', 'behavior'].map((key) => (
                    <line 
                      key={`center-${key}`}
                      x1={optimizedPositions.coreEnergy.pixelX}
                      y1={optimizedPositions.coreEnergy.pixelY}
                      x2={optimizedPositions[key].pixelX}
                      y2={optimizedPositions[key].pixelY}
                      stroke="rgba(255, 255, 255, 0.2)"
                      strokeWidth="1"
                    />
                  ))}
                  
                  {/* 주요 포인트 간의 연결선 (다이아몬드 형태) */}
                  {[
                    ['spiritualPurpose', 'talent'],
                    ['talent', 'karma'],
                    ['karma', 'behavior'],
                    ['behavior', 'spiritualPurpose']
                  ].map(([start, end], index) => (
                    <line 
                      key={`main-${index}`}
                      x1={optimizedPositions[start].pixelX}
                      y1={optimizedPositions[start].pixelY}
                      x2={optimizedPositions[end].pixelX}
                      y2={optimizedPositions[end].pixelY}
                      stroke="rgba(255, 255, 255, 0.2)"
                      strokeWidth="1"
                    />
                  ))}
                  
                  {/* 내부 포인트 연결선 */}
                  {[
                    ['additional1', 'spiritualPurpose'],
                    ['additional1', 'talent'],
                    ['additional2', 'talent'],
                    ['additional2', 'karma'],
                    ['additional3', 'karma'],
                    ['additional3', 'behavior'],
                    ['additional4', 'behavior'],
                    ['additional4', 'spiritualPurpose']
                  ].map(([inner, main], index) => (
                    <line 
                      key={`inner-${index}`}
                      x1={optimizedPositions[inner].pixelX}
                      y1={optimizedPositions[inner].pixelY}
                      x2={optimizedPositions[main].pixelX}
                      y2={optimizedPositions[main].pixelY}
                      stroke="rgba(255, 255, 255, 0.1)"
                      strokeWidth="1"
                    />
                  ))}
                  
                  {/* 외부 포인트 연결선 */}
                  {[
                    ['outer1', 'spiritualPurpose'],
                    ['outer2', 'talent'],
                    ['outer3', 'karma'],
                    ['outer4', 'behavior']
                  ].map(([outer, main], index) => (
                    <line 
                      key={`outer-${index}`}
                      x1={optimizedPositions[outer].pixelX}
                      y1={optimizedPositions[outer].pixelY}
                      x2={optimizedPositions[main].pixelX}
                      y2={optimizedPositions[main].pixelY}
                      stroke="rgba(255, 255, 255, 0.1)"
                      strokeDasharray="4,4"
                      strokeWidth="1"
                    />
                  ))}
                </svg>
                
                {/* 중앙 핵심 에너지 포인트 */}
                <div 
                  className="matrix-point absolute rounded-full flex items-center justify-center text-white font-bold cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: `${optimizedPositions.coreEnergy.pixelX}px`,
                    top: `${optimizedPositions.coreEnergy.pixelY}px`,
                    width: `${optimizedPositions.coreEnergy.size * 2}px`,
                    height: `${optimizedPositions.coreEnergy.size * 2}px`,
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #FFD700, #FFA500)',
                    boxShadow: '0 0 20px rgba(255, 215, 0, 0.5)',
                    fontSize: `${Math.max(optimizedPositions.coreEnergy.size * 0.9, 12)}px`,
                    zIndex: deviceConfig.zIndexLevel.center
                  }}
                  onClick={() => handlePointClick(matrixPoints.coreEnergy)}
                  aria-label={`핵심 에너지: ${matrixPoints.coreEnergy}번 카드`}
                >
                  {matrixPoints.coreEnergy}
                </div>
                
                {/* 메인 포인트 (4개) */}
                {['spiritualPurpose', 'talent', 'karma', 'behavior'].map((key) => (
                  <div 
                    key={key}
                    className="matrix-point absolute rounded-full flex items-center justify-center text-white font-bold cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                    style={{
                      left: `${optimizedPositions[key].pixelX}px`,
                      top: `${optimizedPositions[key].pixelY}px`,
                      width: `${optimizedPositions[key].size * 2}px`,
                      height: `${optimizedPositions[key].size * 2}px`,
                      transform: 'translate(-50%, -50%)',
                      background: key === 'spiritualPurpose' 
                        ? 'linear-gradient(135deg, #8B5CF6, #6D28D9)' // 보라색
                        : key === 'talent' 
                          ? 'linear-gradient(135deg, #10B981, #059669)' // 녹색
                          : key === 'karma' 
                            ? 'linear-gradient(135deg, #EF4444, #DC2626)' // 빨간색
                            : 'linear-gradient(135deg, #3B82F6, #2563EB)', // 파란색
                      boxShadow: key === 'spiritualPurpose' 
                        ? '0 0 15px rgba(139, 92, 246, 0.4)'
                        : key === 'talent' 
                          ? '0 0 15px rgba(16, 185, 129, 0.4)'
                          : key === 'karma' 
                            ? '0 0 15px rgba(239, 68, 68, 0.4)'
                            : '0 0 15px rgba(59, 130, 246, 0.4)',
                      fontSize: `${Math.max(optimizedPositions[key].size * 0.9, 11)}px`,
                      zIndex: deviceConfig.zIndexLevel.main
                    }}
                    onClick={() => handlePointClick(matrixPoints[key])}
                    aria-label={`${key}: ${matrixPoints[key]}번 카드`}
                  >
                    {matrixPoints[key]}
                  </div>
                ))}
                
                {/* 내부 포인트 (4개) */}
                {['additional1', 'additional2', 'additional3', 'additional4'].map((key) => (
                  <div 
                    key={key}
                    className="matrix-point absolute rounded-full flex items-center justify-center text-white font-bold cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                    style={{
                      left: `${optimizedPositions[key].pixelX}px`,
                      top: `${optimizedPositions[key].pixelY}px`,
                      width: `${optimizedPositions[key].size * 2}px`,
                      height: `${optimizedPositions[key].size * 2}px`,
                      transform: 'translate(-50%, -50%)',
                      background: key === 'additional1' 
                        ? 'linear-gradient(135deg, #3B82F6, #2563EB)' // 파란색
                        : key === 'additional2' 
                          ? 'linear-gradient(135deg, #F97316, #EA580C)' // 주황색
                          : key === 'additional3' 
                            ? 'linear-gradient(135deg, #EC4899, #DB2777)' // 핑크색
                            : 'linear-gradient(135deg, #8B5CF6, #6D28D9)', // 보라색
                      boxShadow: key === 'additional1' 
                        ? '0 0 15px rgba(59, 130, 246, 0.4)'
                        : key === 'additional2' 
                          ? '0 0 15px rgba(249, 115, 22, 0.4)'
                          : key === 'additional3' 
                            ? '0 0 15px rgba(236, 72, 153, 0.4)'
                            : '0 0 15px rgba(139, 92, 246, 0.4)',
                      fontSize: `${Math.max(optimizedPositions[key].size * 0.9, 10)}px`,
                      zIndex: deviceConfig.zIndexLevel.inner
                    }}
                    onClick={() => handlePointClick(matrixPoints[key])}
                    aria-label={`${key}: ${matrixPoints[key]}번 카드`}
                  >
                    {matrixPoints[key]}
                  </div>
                ))}
                
                {/* 외부 포인트 (4개) */}
                {['outer1', 'outer2', 'outer3', 'outer4'].map((key) => (
                  <div 
                    key={key}
                    className="matrix-point absolute rounded-full flex items-center justify-center text-white font-bold cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                    style={{
                      left: `${optimizedPositions[key].pixelX}px`,
                      top: `${optimizedPositions[key].pixelY}px`,
                      width: `${optimizedPositions[key].size * 2}px`,
                      height: `${optimizedPositions[key].size * 2}px`,
                      transform: 'translate(-50%, -50%)',
                      background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1))',
                      boxShadow: '0 0 10px rgba(255, 255, 255, 0.2)',
                      fontSize: `${Math.max(optimizedPositions[key].size * 0.9, 9)}px`,
                      zIndex: deviceConfig.zIndexLevel.outer
                    }}
                    onClick={() => handlePointClick(matrixPoints[key])}
                    aria-label={`${key}: ${matrixPoints[key]}번 카드`}
                  >
                    {matrixPoints[key]}
                  </div>
                ))}

                {/* 시각적 요소 - 동심원 효과 */}
                <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                  <div className="w-3/4 h-3/4 rounded-full border border-white/10 animate-pulse-slow"></div>
                  <div className="absolute w-2/3 h-2/3 rounded-full border border-white/10 animate-pulse-slow" style={{ animationDelay: '0.5s' }}></div>
                  <div className="absolute w-1/2 h-1/2 rounded-full border border-white/10 animate-pulse-slow" style={{ animationDelay: '1s' }}></div>
                  <div className="absolute w-1/3 h-1/3 rounded-full border border-white/10 animate-pulse-slow" style={{ animationDelay: '1.5s' }}></div>
                </div>
              </div>
            </div>

            {/* Enhanced Analysis Table - 매트릭스 시각화 아래로 이동 */}
            <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 rounded-xl p-4 sm:p-6 border border-white/10 backdrop-blur-sm">
              <h4 className="text-xl font-bold text-white mb-4 sm:mb-6 text-center">타로카드 분석</h4>
              
              <div className="w-full">
                <table className="w-full min-w-full table-auto">
                  <thead>
                    <tr className="border-b border-white/20">
                      <th className="text-left p-2 sm:p-3 text-white font-semibold">타로카드 이름</th>
                      <th className="text-center p-2 sm:p-3 text-white font-semibold">물리적</th>
                      <th className="text-center p-2 sm:p-3 text-white font-semibold">에너지</th>
                      <th className="text-center p-2 sm:p-3 text-white font-semibold">감정</th>
                    </tr>
                  </thead>
                  <tbody className="text-sm">
                    {[
                      { name: getTarotCard(matrixPoints.spiritualPurpose).name.split('(')[0], number: matrixPoints.spiritualPurpose, color: 'from-purple-500 to-purple-700' },
                      { name: getTarotCard(matrixPoints.talent).name.split('(')[0], number: matrixPoints.talent, color: 'from-green-500 to-green-700' },
                      { name: getTarotCard(matrixPoints.behavior).name.split('(')[0], number: matrixPoints.behavior, color: 'from-blue-500 to-blue-700' },
                      { name: getTarotCard(matrixPoints.karma).name.split('(')[0], number: matrixPoints.karma, color: 'from-red-500 to-red-700' },
                      { name: getTarotCard(matrixPoints.coreEnergy).name.split('(')[0], number: matrixPoints.coreEnergy, color: 'from-yellow-500 to-yellow-700' },
                      { name: getTarotCard(matrixPoints.additional1).name.split('(')[0], number: matrixPoints.additional1, color: 'from-orange-500 to-orange-700' },
                      { name: getTarotCard(matrixPoints.additional2).name.split('(')[0], number: matrixPoints.additional2, color: 'from-pink-500 to-pink-700' }
                    ].map((card, index) => (
                      <tr key={index} className="border-b border-white/10 hover:bg-white/5 transition-colors">
                        <td className="p-2 sm:p-3 flex items-center">
                          <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gradient-to-br ${card.color} flex items-center justify-center text-white font-bold text-xs mr-2 sm:mr-3`}>
                            {card.number}
                          </div>
                          <span className="text-white font-medium text-xs sm:text-sm">{card.name}</span>
                        </td>
                        <td className="text-center p-2 sm:p-3 text-white text-xs sm:text-sm">{Math.floor(Math.random() * 10) + 10}</td>
                        <td className="text-center p-2 sm:p-3 text-white text-xs sm:text-sm">{Math.floor(Math.random() * 15) + 5}</td>
                        <td className="text-center p-2 sm:p-3 text-white text-xs sm:text-sm">{Math.floor(Math.random() * 12) + 8}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 mt-6 sm:mt-8">
                <div className="bg-white/5 rounded-lg p-3 sm:p-4">
                  <h5 className="text-base sm:text-lg font-semibold text-white mb-2 sm:mb-3 flex items-center">
                    <span className="text-yellow-400 mr-2">⭐</span>
                    개인적 측면
                  </h5>
                  <div className="space-y-2 text-xs sm:text-sm text-white/80">
                    <p><span className="text-yellow-400 font-medium">핵심 특질:</span> {getTarotCard(matrixPoints.coreEnergy).coreTraits}</p>
                    <p><span className="text-purple-400 font-medium">영적 목적:</span> {getTarotCard(matrixPoints.spiritualPurpose).shortDescription}</p>
                    <p><span className="text-green-400 font-medium">재능:</span> {getTarotCard(matrixPoints.talent).shortDescription}</p>
                  </div>
                </div>
                
                <div className="bg-white/5 rounded-lg p-3 sm:p-4">
                  <h5 className="text-base sm:text-lg font-semibold text-white mb-2 sm:mb-3 flex items-center">
                    <span className="text-pink-400 mr-2">💫</span>
                    사회적 측면
                  </h5>
                  <div className="space-y-2 text-xs sm:text-sm text-white/80">
                    <p><span className="text-blue-400 font-medium">행동 패턴:</span> {getTarotCard(matrixPoints.behavior).coreTraits}</p>
                    <p><span className="text-red-400 font-medium">카르마 과제:</span> {getTarotCard(matrixPoints.karma).shortDescription}</p>
                    <p><span className="text-orange-400 font-medium">관계 스타일:</span> {getTarotCard(matrixPoints.coreEnergy).relationshipStyle.slice(0, 50)}...</p>
                  </div>
                </div>
              </div>

              <div className="mt-4 sm:mt-6 p-3 sm:p-4 bg-gradient-to-r from-indigo-900/30 to-purple-900/30 rounded-lg border border-indigo-500/20">
                <h5 className="text-base sm:text-lg font-semibold text-white mb-2 flex items-center">
                  <span className="text-indigo-400 mr-2">🔮</span>
                  핵심 매트릭스 총합
                </h5>
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4 mt-3 sm:mt-4">
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-yellow-400">{(matrixPoints.coreEnergy + matrixPoints.spiritualPurpose + matrixPoints.talent + matrixPoints.karma) % 22 || 22}</div>
                    <div className="text-xs text-white/60">하늘</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-green-400">{(matrixPoints.talent + matrixPoints.additional1) % 22 || 22}</div>
                    <div className="text-xs text-white/60">지구</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-blue-400">{(matrixPoints.behavior + matrixPoints.additional2) % 22 || 22}</div>
                    <div className="text-xs text-white/60">남성</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-pink-400">{(matrixPoints.karma + matrixPoints.additional3) % 22 || 22}</div>
                    <div className="text-xs text-white/60">여성</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* 공유 버튼을 매트릭스 시각화와 완전히 분리 - 별도의 카드로 이동 */}
          <div className="glass-card p-4 sm:p-6">
            <h4 className="text-lg font-bold text-white mb-4 text-center">결과 공유 및 저장</h4>
            <div className="grid grid-cols-2 sm:flex sm:flex-wrap justify-center gap-3 sm:space-x-4 w-full max-w-md mx-auto">
              <Button
                onClick={handleShare}
                className="mystical-button from-purple-600 to-purple-700 hover:from-purple-500 hover:to-purple-600 text-white px-4 sm:px-6 py-3 rounded-lg font-medium text-sm sm:text-base w-full touch-manipulation"
              >
                <Share className="mr-2" size={18} />
                결과 공유
              </Button>
              <Button
                onClick={handleDownload}
                className="mystical-button from-green-600 to-green-700 hover:from-green-500 hover:to-green-600 text-white px-4 sm:px-6 py-3 rounded-lg font-medium text-sm sm:text-base w-full touch-manipulation"
              >
                <Download className="mr-2" size={18} />
                결과 저장
              </Button>
            </div>
          </div>
          
          {/* 상세 해석 탭 컴포넌트 추가 */}
          {showInterpretations && (
            <>
              <div className="glass-card p-4 sm:p-6 mb-4">
                <h4 className="text-lg font-bold text-white mb-2 text-center">디버깅 정보</h4>
                <p className="text-white">showInterpretations: {String(showInterpretations)}</p>
                <p className="text-white">matrixPoints: {JSON.stringify(matrixPoints)}</p>
                <p className="text-white">mode: {result.mode}</p>
              </div>
              <InterpretationTabs 
                matrixPoints={matrixPoints} 
                mode={result.mode} 
              />
            </>
          )}
        </>
      )}
    </div>
  );
};
