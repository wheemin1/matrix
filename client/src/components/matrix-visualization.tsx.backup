import { useState, useEffec  useEffect(() => {
    // Simulate loading animation
    const timer1 = setTimeout(() => {
      setShowLoading(false);
      setShowMatrix(true);
    }, 2000); // 로딩 시간 단축

    const timer2 = setTimeout(() => {
      setShowInterpretations(true);
    }, 2500); // 상세 해석도 더 빨리 표시

    // 최적의 컨테이너 크기 계산 및 리사이즈 이벤트 처리
    const updateContainerSize = () => {
      if (containerRef.current) {
        // 화면 크기 및 비율 계산
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;
        const aspectRatio = screenWidth / screenHeight;
        const containerWidth = containerRef.current.parentElement?.clientWidth || screenWidth;
        
        // 컨테이너 최대 너비 (부모 컨테이너의 95%)
        const maxWidth = Math.min(containerWidth * 0.95, screenWidth * 0.95);
        
        // 사용 가능한 최대 높이 (화면 높이의 일정 비율)
        // 모바일에서는 네비게이션 바 등을 고려하여 더 작은 비율 사용
        const maxHeightRatio = isMobile ? 0.6 : 0.7;
        const maxHeight = screenHeight * maxHeightRatio;
        
        // 화면 크기에 따른 최적화된 크기 계산
        let computedSize;
        
        if (isMobile) {
          if (screenWidth < 360) {
            // 매우 작은 화면 (초소형 모바일)
            computedSize = Math.min(maxWidth, maxHeight, 280);
          } else if (screenWidth < 480) {
            // 작은 화면 (일반 모바일)
            computedSize = Math.min(maxWidth, maxHeight, 320);
          } else {
            // 중간 크기 화면 (대형 모바일/태블릿)
            computedSize = Math.min(maxWidth, maxHeight, 420);
          }
        } else {
          // 데스크톱 환경
          if (screenWidth < 1024) {
            // 작은 데스크톱/태블릿
            computedSize = Math.min(maxWidth, maxHeight, 500);
          } else if (screenWidth < 1440) {
            // 일반 데스크톱
            computedSize = Math.min(maxWidth, maxHeight, 550);
          } else {
            // 대형 화면
            computedSize = Math.min(maxWidth, maxHeight, 600);
          }
        }
        
        // 계산된 크기로 컨테이너 크기 업데이트
        setContainerSize(computedSize);
      }
    };
    
    // 초기 컨테이너 크기 설정
    updateContainerSize();
    
    // 화면 크기 변경 감지 및 처리
    window.addEventListener('resize', updateContainerSize);

    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
      window.removeEventListener('resize', updateContainerSize);
    };
  }, [isMobile]); "react";
import { Stars, Share, Download, RotateCcw, Copy } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import InterpretationTabs from "./interpretation-tabs";
import { getTarotCard } from "@/lib/tarot-data";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import { useIsMobile } from "@/hooks/use-mobile";
import { useMatrixPositioning } from "@/hooks/use-matrix-positioning";

interface MatrixVisualizationProps {
  result: any;
  onNewAnalysis: () => void;
}

export default function MatrixVisualization({ result, onNewAnalysis }: MatrixVisualizationProps) {
  const [showLoading, setShowLoading] = useState(true);
  const [showMatrix, setShowMatrix] = useState(false);
  const [showInterpretations, setShowInterpretations] = useState(false);
  const [selectedPoint, setSelectedPoint] = useState<number | null>(null);
  const [containerSize, setContainerSize] = useState(500); // 컨테이너 기본 크기
  const containerRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  const { deviceConfig, calculateOptimizedPositions } = useMatrixPositioning();
  const { toast } = useToast();

  useEffect(() => {
    // Simulate loading animation
    const timer1 = setTimeout(() => {
      setShowLoading(false);
      setShowMatrix(true);
    }, 2000); // 로딩 시간 단축

    const timer2 = setTimeout(() => {
      setShowInterpretations(true);
    }, 2500); // 상세 해석도 더 빨리 표시

    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
    };
  }, []);

  const handlePointClick = (pointNumber: number) => {
    setSelectedPoint(pointNumber);
    const card = getTarotCard(pointNumber);
    toast({
      title: `${pointNumber}번 - ${card.name}`,
      description: card.shortDescription,
    });
  };

  const handleShare = async () => {
    try {
      // 공유할 URL 생성
      const shareUrl = window.location.href;
      
      // Web Share API 지원 확인 (모바일)
      if (navigator.share) {
        await navigator.share({
          title: title,
          text: '나의 운명 매트릭스를 확인해보세요!',
          url: shareUrl
        });
        
        toast({
          title: "공유 성공",
          description: "분석 결과가 공유되었습니다.",
        });
      } else {
        // 클립보드에 URL 복사 (PC)
        await navigator.clipboard.writeText(shareUrl);
        
        toast({
          title: "공유 링크 복사됨",
          description: "분석 결과 링크가 클립보드에 복사되었습니다.",
        });
      }
    } catch (error) {
      console.error("공유 오류:", error);
      toast({
        title: "공유 실패",
        description: "링크 공유 중 오류가 발생했습니다.",
        variant: "destructive",
      });
    }
  };

  // Instagram 공유 기능 제거됨

  const handleDownload = async () => {
    try {
      toast({
        title: "PDF 생성 중",
        description: "분석 결과 PDF를 준비하고 있습니다.",
      });
      
      // 결과 이미지 생성을 위한 컨테이너 선택
      const element = document.querySelector('.matrix-visualization-container') as HTMLElement;
      if (!element) throw new Error("분석 결과 컨테이너를 찾을 수 없습니다.");
      
      // html2canvas 라이브러리를 사용하여 고품질 이미지 생성
      const canvas = await html2canvas(element, {
        scale: 2, // 고해상도
        backgroundColor: '#0f172a', // 배경색 지정
        logging: false,
        useCORS: true, // 외부 이미지 로드 허용
        allowTaint: true, // 교차 출처 이미지 허용
      });
      
      const imgData = canvas.toDataURL('image/jpeg', 0.85);
      
      // PDF 생성
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / (imgHeight + 30));
      const imgX = (pdfWidth - imgWidth * ratio) / 2;
      const imgY = 10;
      
      // 헤더 추가
      pdf.setFillColor(15, 23, 42); // 어두운 배경색
      pdf.rect(0, 0, pdfWidth, pdfHeight, 'F');
      
      // 제목 추가
      pdf.setTextColor(255, 255, 255);
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(16);
      
      const title = mode === 'couple' 
        ? `${result.person1.name}과 ${result.person2.name}의 데스티니 매트릭스`
        : `${result.name}의 데스티니 매트릭스`;
        
      pdf.text(title, pdfWidth/2, 20, { align: 'center' });
      
      // 이미지 추가
      pdf.addImage(imgData, 'JPEG', imgX, imgY + 15, imgWidth * ratio, imgHeight * ratio);
      
      // 푸터 추가
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(150, 150, 150);
      pdf.text('© 데스티니 매트릭스 - destiny33.netlify.app', pdfWidth/2, pdfHeight - 10, { align: 'center' });
      
      // PDF 저장
      pdf.save('운명의_매트릭스_분석결과.pdf');
      
      toast({
        title: "PDF 생성 완료",
        description: "분석 결과가 PDF로 저장되었습니다.",
      });
    } catch (error) {
      console.error("PDF 생성 오류:", error);
      toast({
        title: "PDF 생성 실패",
        description: "PDF 생성 중 오류가 발생했습니다. 다시 시도해주세요.",
        variant: "destructive",
      });
    }
  };

  if (showLoading) {
    return (
      <div className="glass-card p-8 sm:p-16 text-center">
        <div className="w-20 h-20 sm:w-24 sm:h-24 mx-auto mb-4 sm:mb-6 relative">
          <div className="absolute inset-0 border-4 border-white/30 rounded-full"></div>
          <div className="absolute inset-0 border-4 border-yellow-400 rounded-full border-t-transparent animate-spin"></div>
          <div className="absolute inset-2 border-4 border-purple-400 rounded-full border-b-transparent animate-spin" style={{ animationDirection: 'reverse', animationDuration: '2s' }}></div>
        </div>
        <h3 className="text-xl sm:text-2xl font-bold text-white mb-2">운명의 매트릭스를 계산하고 있습니다...</h3>
        <p className="text-sm sm:text-base text-white/70">잠시만 기다려주세요. 우주의 에너지를 읽어내는 중입니다.</p>
      </div>
    );
  }

  const matrixPoints = result.mode === 'couple' ? result.matrixPoints.person1 : result.matrixPoints;
  const title = result.mode === 'couple' 
    ? `${result.person1.name}과 ${result.person2.name}의 데스티니 매트릭스`
    : `${result.name}의 데스티니 매트릭스`;
  const mode = result.mode;

  return (
    <div className="space-y-4 sm:space-y-6 max-w-full">
      {showMatrix && (
        <>
          <div className="glass-card p-4 sm:p-6 md:p-8">
            {/* Matrix Chart - 최상단에 배치 */}
            <div className="matrix-visualization-container flex flex-col items-center justify-center mb-6 px-2 sm:px-0">
              <div className="text-center mb-4 sm:mb-6">
                <h3 className="text-xl sm:text-2xl font-bold text-white mb-1 sm:mb-2">{title}</h3>
                <p className="text-sm text-white/70">각 숫자를 클릭하면 상세한 해석을 볼 수 있습니다</p>
              </div>
              {/* 매트릭스 시각화 컴포넌트 */}
              <div className="relative w-[330px] h-[330px] sm:w-[400px] sm:h-[400px] md:w-[500px] md:h-[500px] lg:w-[580px] lg:h-[580px] bg-gradient-to-br from-indigo-900/20 to-purple-900/20 rounded-full border border-white/10 transform-gpu touch-manipulation">
                {/* Outer Circle with Age Markers */}
                <div className="absolute inset-0 border-2 border-white/30 rounded-full"></div>
                
                {/* Inner geometric structure */}
                {/* 내부 배경 그라데이션 원 추가 */}
                <div className="absolute inset-[10%] rounded-full bg-gradient-to-br from-indigo-800/10 to-purple-600/10 border border-white/5"></div>
                
                <svg className="absolute inset-0 w-full h-full" viewBox="0 0 500 500">
                  <defs>
                    <linearGradient id="lineGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                      <stop offset="0%" stopColor="rgba(255,255,255,0.4)" />
                      <stop offset="100%" stopColor="rgba(255,255,255,0.1)" />
                    </linearGradient>
                    <filter id="glow" x="-20%" y="-20%" width="140%" height="140%">
                      <feGaussianBlur stdDeviation="2" result="blur" />
                      <feComposite in="SourceGraphic" in2="blur" operator="over" />
                    </filter>
                  </defs>
                  <g stroke="url(#lineGradient)" strokeWidth="1.5" fill="none" filter="url(#glow)">
                    {/* Outer diamond */}
                    <polygon points="250,50 430,250 250,450 70,250" />
                    {/* Inner diamond */}
                    <polygon points="250,110 370,250 250,390 130,250" />
                    {/* Central cross */}
                    <line x1="250" y1="110" x2="250" y2="390" />
                    <line x1="130" y1="250" x2="370" y2="250" />
                    {/* Diagonal connections */}
                    <line x1="250" y1="110" x2="370" y2="250" />
                    <line x1="370" y1="250" x2="250" y2="390" />
                    <line x1="250" y1="390" x2="130" y2="250" />
                    <line x1="130" y1="250" x2="250" y2="110" />
                    {/* Heart symbol in center */}
                    <path d="M240 240 c0,-10 10,-15 12,-5 c2,-10 12,-5 12,5 c0,8 -12,20 -12,20 s-12,-12 -12,-20 z" fill="rgba(255,20,147,0.8)" />
                  </g>
                </svg>
                
                {/* Matrix Points with enhanced styling */}
                {/* Top - Spiritual Purpose */}
                <div 
                  className="matrix-point absolute w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 rounded-full flex items-center justify-center text-white font-bold text-base sm:text-lg cursor-pointer transition-all duration-300 border-2 border-white/40 shadow-xl hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '50%',
                    top: '6%', // 더 위쪽으로 이동 (8% -> 6%)
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #8B5CF6, #6366F1)',
                    boxShadow: '0 0 20px rgba(139, 92, 246, 0.4)',
                    padding: '12px', // 터치 영역 확장
                    zIndex: 30 // z-index 값 증가 (5 -> 30)
                  }}
                  onClick={() => handlePointClick(matrixPoints.spiritualPurpose)}
                  aria-label={`영적 목적: ${matrixPoints.spiritualPurpose}번 카드`}
                >
                  {matrixPoints.spiritualPurpose}
                </div>
                
                {/* Right - Talent */}
                <div 
                  className="matrix-point absolute w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 rounded-full flex items-center justify-center text-white font-bold text-base sm:text-lg cursor-pointer transition-all duration-300 border-2 border-white/40 shadow-xl hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    right: '6%', // 더 오른쪽으로 이동 (8% -> 6%)
                    top: '50%',
                    transform: 'translate(50%, -50%)',
                    background: 'linear-gradient(135deg, #10B981, #059669)',
                    boxShadow: '0 0 20px rgba(16, 185, 129, 0.4)',
                    padding: '12px', // 터치 영역 확장
                    zIndex: 30 // z-index 값 증가 (5 -> 30)
                  }}
                  onClick={() => handlePointClick(matrixPoints.talent)}
                  aria-label={`재능: ${matrixPoints.talent}번 카드`}
                >
                  {matrixPoints.talent}
                </div>
                
                {/* Bottom - Karma */}
                <div 
                  className="matrix-point absolute w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 rounded-full flex items-center justify-center text-white font-bold text-base sm:text-lg cursor-pointer transition-all duration-300 border-2 border-white/40 shadow-xl hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '50%',
                    bottom: '6%', // 더 아래쪽으로 이동 (8% -> 6%)
                    transform: 'translate(-50%, 50%)',
                    background: 'linear-gradient(135deg, #EF4444, #DC2626)',
                    boxShadow: '0 0 20px rgba(239, 68, 68, 0.4)',
                    padding: '12px', // 터치 영역 확장
                    zIndex: 30 // z-index 값 증가 (5 -> 30)
                  }}
                  onClick={() => handlePointClick(matrixPoints.karma)}
                  aria-label={`카르마: ${matrixPoints.karma}번 카드`}
                >
                  {matrixPoints.karma}
                </div>
                
                {/* Left - Behavior */}
                <div 
                  className="matrix-point absolute w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 rounded-full flex items-center justify-center text-white font-bold text-base sm:text-lg cursor-pointer transition-all duration-300 border-2 border-white/40 shadow-xl hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '6%', // 더 왼쪽으로 이동 (8% -> 6%)
                    top: '50%',
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #8B5CF6, #7C3AED)',
                    boxShadow: '0 0 20px rgba(139, 92, 246, 0.4)',
                    padding: '12px', // 터치 영역 확장
                    zIndex: 30 // z-index 값 증가 (5 -> 30)
                  }}
                  onClick={() => handlePointClick(matrixPoints.behavior)}
                  aria-label={`행동: ${matrixPoints.behavior}번 카드`}
                >
                  {matrixPoints.behavior}
                </div>
                
                {/* Center - Core Energy */}
                <div 
                  className="matrix-point absolute w-14 h-14 sm:w-16 sm:h-16 md:w-20 md:h-20 rounded-full flex items-center justify-center text-white font-bold text-lg sm:text-xl cursor-pointer transition-all duration-300 border-2 sm:border-3 border-white/50 shadow-2xl hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '50%',
                    top: '50%',
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #F59E0B, #D97706)',
                    boxShadow: '0 0 30px rgba(245, 158, 11, 0.6)',
                    padding: '14px', // 터치 영역 확장
                    zIndex: 50 // 가장 위에 표시되도록 z-index 값 증가 (6 -> 50)
                  }}
                  onClick={() => handlePointClick(matrixPoints.coreEnergy)}
                  aria-label={`핵심 에너지: ${matrixPoints.coreEnergy}번 카드`}
                >
                  {matrixPoints.coreEnergy}
                </div>
                
                {/* Additional inner points - 위치 조정해서 더 넓게 배치 */}
                <div 
                  className="matrix-point absolute w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '78%', // 더 오른쪽으로 이동 (75% -> 78%)
                    top: '22%', // 더 위쪽으로 이동 (25% -> 22%)
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #3B82F6, #2563EB)',
                    boxShadow: '0 0 15px rgba(59, 130, 246, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 25 // z-index 값 증가 (4 -> 25)
                  }}
                  onClick={() => handlePointClick(matrixPoints.additional1)}
                  aria-label={`추가 포인트 1: ${matrixPoints.additional1}번 카드`}
                >
                  {matrixPoints.additional1}
                </div>
                <div 
                  className="matrix-point absolute w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '78%', // 더 오른쪽으로 이동 (75% -> 78%)
                    top: '78%', // 더 아래쪽으로 이동 (75% -> 78%)
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #F97316, #EA580C)',
                    boxShadow: '0 0 15px rgba(249, 115, 22, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 25 // z-index 값 증가 (4 -> 25)
                  }}
                  onClick={() => handlePointClick(matrixPoints.additional2)}
                  aria-label={`추가 포인트 2: ${matrixPoints.additional2}번 카드`}
                >
                  {matrixPoints.additional2}
                </div>
                <div 
                  className="matrix-point absolute w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '22%', // 더 왼쪽으로 이동 (25% -> 22%)
                    top: '78%', // 더 아래쪽으로 이동 (75% -> 78%)
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #EC4899, #DB2777)',
                    boxShadow: '0 0 15px rgba(236, 72, 153, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 25 // z-index 값 증가 (4 -> 25)
                  }}
                  onClick={() => handlePointClick(matrixPoints.additional3)}
                  aria-label={`추가 포인트 3: ${matrixPoints.additional3}번 카드`}
                >
                  {matrixPoints.additional3}
                </div>
                <div 
                  className="matrix-point absolute w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '22%', // 더 왼쪽으로 이동 (25% -> 22%)
                    top: '22%', // 더 위쪽으로 이동 (25% -> 22%)
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #06B6D4, #0891B2)',
                    boxShadow: '0 0 15px rgba(6, 182, 212, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 25 // z-index 값 증가 (4 -> 25)
                  }}
                  onClick={() => handlePointClick(matrixPoints.additional4)}
                  aria-label={`추가 포인트 4: ${matrixPoints.additional4}번 카드`}
                >
                  {matrixPoints.additional4}
                </div>
                
                {/* Outer ring points - 배치를 좀 더 바깥쪽으로 */}
                <div 
                  className="matrix-point absolute w-11 h-11 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border-2 border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '50%',
                    top: '1%', // 더 바깥쪽으로 이동 (3% -> 1%)
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #6366F1, #4F46E5)',
                    boxShadow: '0 0 15px rgba(99, 102, 241, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 20 // z-index 값 증가 (4 -> 20)
                  }}
                  onClick={() => handlePointClick(matrixPoints.outer1)}
                  aria-label={`외부 포인트 1: ${matrixPoints.outer1}번 카드`}
                >
                  {matrixPoints.outer1}
                  <span className="absolute -top-6 text-[10px] text-white/60 font-medium">0세</span>
                </div>
                <div 
                  className="matrix-point absolute w-11 h-11 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border-2 border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    right: '1%', // 더 바깥쪽으로 이동 (3% -> 1%)
                    top: '50%',
                    transform: 'translate(50%, -50%)',
                    background: 'linear-gradient(135deg, #14B8A6, #0D9488)',
                    boxShadow: '0 0 15px rgba(20, 184, 166, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 20 // z-index 값 증가 (4 -> 20)
                  }}
                  onClick={() => handlePointClick(matrixPoints.outer2)}
                  aria-label={`외부 포인트 2: ${matrixPoints.outer2}번 카드`}
                >
                  {matrixPoints.outer2}
                  <span className="absolute -right-7 text-[10px] text-white/60 font-medium">30세</span>
                </div>
                <div 
                  className="matrix-point absolute w-11 h-11 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border-2 border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '50%',
                    bottom: '1%', // 더 바깥쪽으로 이동 (3% -> 1%)
                    transform: 'translate(-50%, 50%)',
                    background: 'linear-gradient(135deg, #F59E0B, #D97706)',
                    boxShadow: '0 0 15px rgba(245, 158, 11, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 20 // z-index 값 증가 (4 -> 20)
                  }}
                  onClick={() => handlePointClick(matrixPoints.outer3)}
                  aria-label={`외부 포인트 3: ${matrixPoints.outer3}번 카드`}
                >
                  {matrixPoints.outer3}
                  <span className="absolute -bottom-6 text-[10px] text-white/60 font-medium">60세</span>
                </div>
                <div 
                  className="matrix-point absolute w-11 h-11 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm cursor-pointer transition-all duration-300 border-2 border-white/30 shadow-lg hover:scale-110 active:scale-95 touch-manipulation"
                  style={{
                    left: '1%', // 더 바깥쪽으로 이동 (3% -> 1%)
                    top: '50%',
                    transform: 'translate(-50%, -50%)',
                    background: 'linear-gradient(135deg, #059669, #047857)',
                    boxShadow: '0 0 15px rgba(5, 150, 105, 0.4)',
                    padding: '10px', // 터치 영역 확장
                    zIndex: 20 // z-index 값 증가 (4 -> 20)
                  }}
                  onClick={() => handlePointClick(matrixPoints.outer4)}
                  aria-label={`외부 포인트 4: ${matrixPoints.outer4}번 카드`}
                >
                  {matrixPoints.outer4}
                  <span className="absolute -left-7 text-[10px] text-white/60 font-medium">90세</span>
                </div>
              </div>
            </div>
            
            {/* Enhanced Analysis Table - 매트릭스 시각화 아래로 이동 */}
            <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 rounded-xl p-4 sm:p-6 border border-white/10 backdrop-blur-sm">
              <h4 className="text-xl font-bold text-white mb-4 sm:mb-6 text-center">타로카드 분석</h4>
              
              <div className="w-full">
                <table className="w-full min-w-full table-auto">
                  <thead>
                    <tr className="border-b border-white/20">
                      <th className="text-left p-2 sm:p-3 text-white font-semibold">타로카드 이름</th>
                      <th className="text-center p-2 sm:p-3 text-white font-semibold">물리적</th>
                      <th className="text-center p-2 sm:p-3 text-white font-semibold">에너지</th>
                      <th className="text-center p-2 sm:p-3 text-white font-semibold">감정</th>
                    </tr>
                  </thead>
                  <tbody className="text-sm">
                    {[
                      { name: getTarotCard(matrixPoints.spiritualPurpose).name.split('(')[0], number: matrixPoints.spiritualPurpose, color: 'from-purple-500 to-purple-700' },
                      { name: getTarotCard(matrixPoints.talent).name.split('(')[0], number: matrixPoints.talent, color: 'from-green-500 to-green-700' },
                      { name: getTarotCard(matrixPoints.behavior).name.split('(')[0], number: matrixPoints.behavior, color: 'from-blue-500 to-blue-700' },
                      { name: getTarotCard(matrixPoints.karma).name.split('(')[0], number: matrixPoints.karma, color: 'from-red-500 to-red-700' },
                      { name: getTarotCard(matrixPoints.coreEnergy).name.split('(')[0], number: matrixPoints.coreEnergy, color: 'from-yellow-500 to-yellow-700' },
                      { name: getTarotCard(matrixPoints.additional1).name.split('(')[0], number: matrixPoints.additional1, color: 'from-orange-500 to-orange-700' },
                      { name: getTarotCard(matrixPoints.additional2).name.split('(')[0], number: matrixPoints.additional2, color: 'from-pink-500 to-pink-700' }
                    ].map((card, index) => (
                      <tr key={index} className="border-b border-white/10 hover:bg-white/5 transition-colors">
                        <td className="p-2 sm:p-3 flex items-center">
                          <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gradient-to-br ${card.color} flex items-center justify-center text-white font-bold text-xs mr-2 sm:mr-3`}>
                            {card.number}
                          </div>
                          <span className="text-white font-medium text-xs sm:text-sm">{card.name}</span>
                        </td>
                        <td className="text-center p-2 sm:p-3 text-white text-xs sm:text-sm">{Math.floor(Math.random() * 10) + 10}</td>
                        <td className="text-center p-2 sm:p-3 text-white text-xs sm:text-sm">{Math.floor(Math.random() * 15) + 5}</td>
                        <td className="text-center p-2 sm:p-3 text-white text-xs sm:text-sm">{Math.floor(Math.random() * 12) + 8}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 mt-6 sm:mt-8">
                <div className="bg-white/5 rounded-lg p-3 sm:p-4">
                  <h5 className="text-base sm:text-lg font-semibold text-white mb-2 sm:mb-3 flex items-center">
                    <span className="text-yellow-400 mr-2">⭐</span>
                    개인적 측면
                  </h5>
                  <div className="space-y-2 text-xs sm:text-sm text-white/80">
                    <p><span className="text-yellow-400 font-medium">핵심 특질:</span> {getTarotCard(matrixPoints.coreEnergy).coreTraits}</p>
                    <p><span className="text-purple-400 font-medium">영적 목적:</span> {getTarotCard(matrixPoints.spiritualPurpose).shortDescription}</p>
                    <p><span className="text-green-400 font-medium">재능:</span> {getTarotCard(matrixPoints.talent).shortDescription}</p>
                  </div>
                </div>
                
                <div className="bg-white/5 rounded-lg p-3 sm:p-4">
                  <h5 className="text-base sm:text-lg font-semibold text-white mb-2 sm:mb-3 flex items-center">
                    <span className="text-pink-400 mr-2">💫</span>
                    사회적 측면
                  </h5>
                  <div className="space-y-2 text-xs sm:text-sm text-white/80">
                    <p><span className="text-blue-400 font-medium">행동 패턴:</span> {getTarotCard(matrixPoints.behavior).coreTraits}</p>
                    <p><span className="text-red-400 font-medium">카르마 과제:</span> {getTarotCard(matrixPoints.karma).shortDescription}</p>
                    <p><span className="text-orange-400 font-medium">관계 스타일:</span> {getTarotCard(matrixPoints.coreEnergy).relationshipStyle.slice(0, 50)}...</p>
                  </div>
                </div>
              </div>

              <div className="mt-4 sm:mt-6 p-3 sm:p-4 bg-gradient-to-r from-indigo-900/30 to-purple-900/30 rounded-lg border border-indigo-500/20">
                <h5 className="text-base sm:text-lg font-semibold text-white mb-2 flex items-center">
                  <span className="text-indigo-400 mr-2">🔮</span>
                  핵심 매트릭스 총합
                </h5>
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4 mt-3 sm:mt-4">
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-yellow-400">{(matrixPoints.coreEnergy + matrixPoints.spiritualPurpose + matrixPoints.talent + matrixPoints.karma) % 22 || 22}</div>
                    <div className="text-xs text-white/60">하늘</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-green-400">{(matrixPoints.talent + matrixPoints.additional1) % 22 || 22}</div>
                    <div className="text-xs text-white/60">지구</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-blue-400">{(matrixPoints.behavior + matrixPoints.additional2) % 22 || 22}</div>
                    <div className="text-xs text-white/60">남성</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl sm:text-2xl font-bold text-pink-400">{(matrixPoints.karma + matrixPoints.additional3) % 22 || 22}</div>
                    <div className="text-xs text-white/60">여성</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* 공유 버튼을 매트릭스 시각화와 완전히 분리 - 별도의 카드로 이동 */}
          <div className="glass-card p-4 sm:p-6">
            <h4 className="text-lg font-bold text-white mb-4 text-center">결과 공유 및 저장</h4>
            <div className="grid grid-cols-2 sm:flex sm:flex-wrap justify-center gap-3 sm:space-x-4 w-full max-w-md mx-auto">
              <Button
                onClick={handleShare}
                className="mystical-button from-purple-600 to-purple-700 hover:from-purple-500 hover:to-purple-600 text-white px-4 sm:px-6 py-3 rounded-lg font-medium text-sm sm:text-base w-full touch-manipulation"
              >
                <Share className="mr-2" size={18} />
                결과 공유
              </Button>
              <Button
                onClick={handleDownload}
                className="mystical-button from-green-600 to-green-700 hover:from-green-500 hover:to-green-600 text-white px-4 sm:px-6 py-3 rounded-lg font-medium text-sm sm:text-base w-full touch-manipulation"
              >
                <Download className="mr-2" size={18} />
                PDF 저장
              </Button>
              <Button
                onClick={onNewAnalysis}
                className="mystical-button from-yellow-600 to-yellow-700 hover:from-yellow-500 hover:to-yellow-600 text-white px-4 sm:px-6 py-3 rounded-lg font-medium text-sm sm:text-base w-full col-span-2 mt-1 touch-manipulation"
              >
                <RotateCcw className="mr-2" size={18} />
                새 분석
              </Button>
            </div>
          </div>
        </>
      )}

      {showInterpretations && (
        <InterpretationTabs matrixPoints={matrixPoints} mode={result.mode} />
      )}
    </div>
  );
}
