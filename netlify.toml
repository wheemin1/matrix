[build]
  base = "."
  publish = "dist"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "20"
  NPM_FLAGS = "--prefer-offline --no-audit"
  NODE_ENV = "production"
  
[functions]
  directory = "netlify/functions"
  node_bundler = "esbuild"

# CSS 파일 MIME 타입 설정
[[headers]]
  for = "*.css"
  [headers.values]
    Content-Type = "text/css"
    Cache-Control = "public, max-age=31536000"

# 아이콘 및 이미지 캐싱 최적화
[[headers]]
  for = "*.svg"
  [headers.values]
    Cache-Control = "public, max-age=2592000" # 30일

[[headers]]
  for = "*.png"
  [headers.values]
    Cache-Control = "public, max-age=3600" # 1시간 (디버깅 중)
    Content-Type = "image/png"

[[headers]]
  for = "*.jpg"
  [headers.values]
    Cache-Control = "public, max-age=2592000" # 30일

[[headers]]
  for = "*.woff2"
  [headers.values]
    Cache-Control = "public, max-age=31536000" # 1년
    Access-Control-Allow-Origin = "*"

[[headers]]
  for = "/og-simple.svg"
  [headers.values]
    Cache-Control = "public, max-age=3600"
    Content-Type = "image/svg+xml"

[[headers]]
  for = "/og-image.png"
  [headers.values]
    Cache-Control = "public, max-age=300, s-maxage=300, stale-while-revalidate=3600"
    Content-Type = "image/png"

[[headers]]
  for = "/manifest.json"
  [headers.values]
    Cache-Control = "public, max-age=300, s-maxage=300, stale-while-revalidate=3600"
    Content-Type = "application/json"

[[headers]]
  for = "/robots.txt"
  [headers.values]
    Cache-Control = "public, max-age=300, s-maxage=300, stale-while-revalidate=3600"
    Content-Type = "text/plain"
    
# Add specific headers for HTML content that help search engines
[[headers]]
  for = "/*.html"
  [headers.values]
    Content-Type = "text/html; charset=UTF-8"
    Cache-Control = "public, max-age=0, must-revalidate"
    X-Robots-Tag = "all" 
    X-Content-Type-Options = "nosniff"

[[headers]]
  for = "/twitter-image.png"
  [headers.values]
    Cache-Control = "public, max-age=300, s-maxage=300, stale-while-revalidate=3600"
    Content-Type = "image/png"

[[headers]]
  for = "/kakao-image.png"
  [headers.values]
    Cache-Control = "public, max-age=300, s-maxage=300, stale-while-revalidate=3600"
    Content-Type = "image/png"

[[headers]]
  for = "/favicon.ico"
  [headers.values]
    Cache-Control = "public, max-age=300"
    Content-Type = "image/x-icon"

[[headers]]
  for = "/icon-*.png"
  [headers.values]
    Cache-Control = "public, max-age=300"
    Content-Type = "image/png"

[[headers]]
  for = "/twitter-image.png"
  [headers.values]
    Cache-Control = "public, max-age=3600, s-maxage=3600, stale-while-revalidate=86400"
    Content-Type = "image/png"

[[headers]]
  for = "/kakao-image.png"
  [headers.values]
    Cache-Control = "public, max-age=3600, s-maxage=3600, stale-while-revalidate=86400"
    Content-Type = "image/png"

[[headers]]
  for = "/icon-simple.svg"
  [headers.values]
    Cache-Control = "public, max-age=3600"
    Content-Type = "image/svg+xml"

[[headers]]
  for = "/site.webmanifest"
  [headers.values]
    Content-Type = "application/manifest+json"
    Cache-Control = "public, max-age=3600"

[[headers]]
  for = "/manifest.json"
  [headers.values]
    Content-Type = "application/manifest+json"
    Cache-Control = "public, max-age=3600"

# 정적 파일 캐싱 및 MIME 타입 설정
[[headers]]
  for = "/src/styles/*"
  [headers.values]
    Content-Type = "text/css"
    Cache-Control = "public, max-age=31536000"

# Security headers
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains"
    Content-Security-Policy = "default-src 'self'; connect-src 'self' https://*; img-src 'self' data: https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net; font-src 'self' data: https://fonts.gstatic.com https://cdn.jsdelivr.net;"

# 정적 리소스에 대한 리다이렉트 제외 규칙 (CSS 파일이 HTML로 리다이렉트되는 것 방지)
[[redirects]]
  from = "/src/styles/*"
  to = "/src/styles/:splat"
  status = 200

# Client-side routing redirects with pre-rendering for SEO
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
  force = false
  
  # Enable pre-rendering for search engines
  [redirects.headers]
    X-Robots-Tag = "all"
    
  # Only apply SPA redirect for browser requests, not search engines
  conditions = {Cookie = ["!_prerendered=true"], User-Agent = ["!Googlebot*", "!bingbot*", "!YandexBot*", "!DuckDuckBot*", "!Baiduspider*", "!facebookexternalhit*", "!Twitterbot*"]}

# Direct search engine crawlers to the optimized path
[[redirects]]
  from = "/*"
  to = "/.netlify/functions/dynamic-render"
  status = 200
  force = false
  conditions = {User-Agent = ["Googlebot*", "bingbot*", "YandexBot*", "DuckDuckBot*", "Baiduspider*", "facebookexternalhit*", "Twitterbot*"]}
  query = {url = ":splat"}

# Support for AJAX crawling (_escaped_fragment_)
[[redirects]]
  from = "/*"
  to = "/.netlify/functions/snapshot-generator/:splat"
  status = 200
  force = false
  conditions = {Query = ["_escaped_fragment_"]}

# SEO-specific routes for crawlers and snapshots
[[redirects]]
  from = "/_seo/*"
  to = "/.netlify/functions/snapshot-generator/:splat"
  status = 200
  force = false

# Netlify 도메인에서 커스텀 도메인으로 리다이렉트 (필요한 경우)
[[redirects]]
  from = "https://destiny33.netlify.app/*"
  to = "https://destiny33.site/:splat"
  status = 301
  force = true

[[redirects]]
  from = "http://destiny33.netlify.app/*"
  to = "https://destiny33.site/:splat"
  status = 301
  force = true

[[redirects]]
  from = "destiny33.netlify.app/*"
  to = "https://destiny33.site/:splat"
  status = 301
  force = true

# Ensure manifest.json is properly served
[[redirects]]
  from = "/manifest.json"
  to = "/manifest.json"
  status = 200
  force = true

# Support for site.webmanifest as an alternative
[[redirects]]
  from = "/site.webmanifest"
  to = "/manifest.json"
  status = 200
  force = true

# Ensure robots.txt is properly served
[[redirects]]
  from = "/robots.txt"
  to = "/robots.txt"
  status = 200
  force = true

# 명시적 HTTP → HTTPS 리다이렉션 규칙을 제거하고 Netlify의 기본 HTTPS 강제 설정에 의존합니다.

# API redirects for serverless functions
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

# Serverless functions configuration
[functions]
  directory = "netlify/functions"
  node_bundler = "esbuild"
  
[functions."*"]
  node_bundler = "esbuild"
